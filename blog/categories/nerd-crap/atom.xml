<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Nerd Crap | ncatarino.github.io]]></title>
  <link href="http://ncatarino.github.io/blog/categories/nerd-crap/atom.xml" rel="self"/>
  <link href="http://ncatarino.github.io/"/>
  <updated>2013-11-22T14:27:14+00:00</updated>
  <id>http://ncatarino.github.io/</id>
  <author>
    <name><![CDATA[Nuno Catarino]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using LaTeX in Portuguese]]></title>
    <link href="http://ncatarino.github.io/archives/1556"/>
    <updated>2013-11-21T00:00:00+00:00</updated>
    <id>http://ncatarino.github.io/archives/using-latex-in-portuguese</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been using LaTeX for a couple of small projects recently and I had some trouble figuring out how to make the accented characters as well as stuff like &#8216;Ç&#8217; render correctly in the end product. After some mucking about I learned that we have to use three extra packages so everything shows up nicely in the end. It probably works just as well for other languages but you may want to refer to the documentation. Here are the packages you have to use:</p>

<p><code>tex Packages
\usepackage[portuguese]{babel}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My .bashrc]]></title>
    <link href="http://ncatarino.github.io/archives/1552"/>
    <updated>2013-11-21T00:00:00+00:00</updated>
    <id>http://ncatarino.github.io/archives/my-bashrc</id>
    <content type="html"><![CDATA[<p>Here&#8217;s something I keep forgetting to save and/or backup, my .bashrc. The last couple of times I reinstalled or switched to another distribution I <em>did</em> remember to backup my dotfiles but I figured I might as well just post it here in case I ever need it again.</p>

<p>Most of it comes from the Arch Linux Wiki, a great place for Linux information even if you <em>don&#8217;t</em> use Arch. I have then made a few tweaks from snippets I found on other websites. I can&#8217;t remember all of them since at the time I had no intention of posting this here. If you find anything that you think is yours please send me the article link so I can pingback to it. Keep in mind there are some Arch specific sections in there, feel free to edit and redistribute as you see fit.</p>

<p>Since it&#8217;s quite a wall of text, I&#8217;ll drop it after a break for the website proper. If you&#8217;re reading this through an RSS reader, sorry for the wall of text.</p>

<!--more-->


<p>``` bash .bashrc</p>

<h1>/etc/bash.bashrc</h1>

<p>#</p>

<h1>This file is sourced by all <em>interactive</em> bash shells on startup,</h1>

<h1>including some apparently interactive shells such as scp and rcp</h1>

<h1>that can&rsquo;t tolerate any output. So make sure this doesn&rsquo;t display</h1>

<h1>anything or bad things will happen !</h1>

<h1>Test for an interactive shell. There is no need to set anything</h1>

<h1>past this point for scp and rcp, and it&rsquo;s important to refrain from</h1>

<h1>outputting anything in those cases.</h1>

<h1>If not running interactively, don&rsquo;t do anything!</h1>

<p>[[ $&ndash; != <em>i</em> ]] &amp;&amp; return</p>

<h1>Bash won&rsquo;t get SIGWINCH if another process is in the foreground.</h1>

<h1>Enable checkwinsize so that bash will check the terminal size when</h1>

<h1>it regains control.</h1>

<h1><a href="http://cnswww.cns.cwru.edu/~chet/bash/FAQ">http://cnswww.cns.cwru.edu/~chet/bash/FAQ</a> (E11)</h1>

<p>shopt -s checkwinsize</p>

<h1>Enable history appending instead of overwriting.</h1>

<p>shopt -s histappend</p>

<p>case ${TERM} in</p>

<pre><code>xterm*|rxvt*|Eterm|aterm|kterm|gnome*)
    PROMPT_COMMAND=${PROMPT_COMMAND:+$PROMPT_COMMAND; }'printf "\033]0;%s@%s:%s\007" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"'
    ;;
screen)
    PROMPT_COMMAND=${PROMPT_COMMAND:+$PROMPT_COMMAND; }'printf "\033_%s@%s:%s\033\\" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"'
    ;;
</code></pre>

<p>esac</p>

<h1>Set colorful PS1 only on colorful terminals.</h1>

<h1>dircolors &mdash;print-database uses its own built-in database</h1>

<h1>instead of using /etc/DIR_COLORS. Try to use the external file</h1>

<h1>first to take advantage of user additions. Use internal bash</h1>

<h1>globbing instead of external grep binary.</h1>

<h1>sanitize TERM:</h1>

<p>safe_term=${TERM//[^[:alnum:]]/?}
match_lhs=&ldquo;&rdquo;</p>

<p>[[ -f ~/.dir_colors ]] &amp;&amp; match_lhs=&ldquo;${match_lhs}$(&lt;~/.dir_colors)&rdquo;
[[ -f /etc/DIR_COLORS ]] &amp;&amp; match_lhs=&ldquo;${match_lhs}$(&lt;/etc/DIR_COLORS)&rdquo;
[[ -z ${match_lhs} ]] \</p>

<pre><code>&amp;&amp; type -P dircolors &gt;/dev/null \
&amp;&amp; match_lhs=$(dircolors --print-database)
</code></pre>

<p>if [[ $&lsquo;\n&rsquo;${match_lhs} == <em>$&lsquo;\n&rsquo;&ldquo;TERM &rdquo;${safe_term}</em> ]] ; then</p>

<pre><code># we have colors :-)

# Enable colors for ls, etc. Prefer ~/.dir_colors
if type -P dircolors &gt;/dev/null ; then
    if [[ -f ~/.dir_colors ]] ; then
        eval $(dircolors -b ~/.dir_colors)
    elif [[ -f /etc/DIR_COLORS ]] ; then
        eval $(dircolors -b /etc/DIR_COLORS)
    fi
fi
</code></pre>

<h1>Reset</h1>

<p>Color_Off=&ldquo;[\033[0m]&rdquo;       # Text Reset</p>

<h1>Regular Colors</h1>

<p>Black=&ldquo;[\033[0;30m]&rdquo;        # Black
Red=&ldquo;[\033[0;31m]&rdquo;          # Red
Green=&ldquo;[\033[0;32m]&rdquo;        # Green
Yellow=&ldquo;[\033[0;33m]&rdquo;       # Yellow
Blue=&ldquo;[\033[0;34m]&rdquo;         # Blue
Purple=&ldquo;[\033[0;35m]&rdquo;       # Purple
Cyan=&ldquo;[\033[0;36m]&rdquo;         # Cyan
White=&ldquo;[\033[0;37m]&rdquo;        # White</p>

<h1>Bold</h1>

<p>BBlack=&ldquo;[\033[1;30m]&rdquo;       # Black
BRed=&ldquo;[\033[1;31m]&rdquo;         # Red
BGreen=&ldquo;[\033[1;32m]&rdquo;       # Green
BYellow=&ldquo;[\033[1;33m]&rdquo;      # Yellow
BBlue=&ldquo;[\033[1;34m]&rdquo;        # Blue
BPurple=&ldquo;[\033[1;35m]&rdquo;      # Purple
BCyan=&ldquo;[\033[1;36m]&rdquo;        # Cyan
BWhite=&ldquo;[\033[1;37m]&rdquo;       # White</p>

<h1>Underline</h1>

<p>UBlack=&ldquo;[\033[4;30m]&rdquo;       # Black
URed=&ldquo;[\033[4;31m]&rdquo;         # Red
UGreen=&ldquo;[\033[4;32m]&rdquo;       # Green
UYellow=&ldquo;[\033[4;33m]&rdquo;      # Yellow
UBlue=&ldquo;[\033[4;34m]&rdquo;        # Blue
UPurple=&ldquo;[\033[4;35m]&rdquo;      # Purple
UCyan=&ldquo;[\033[4;36m]&rdquo;        # Cyan
UWhite=&ldquo;[\033[4;37m]&rdquo;       # White</p>

<h1>Background</h1>

<p>On_Black=&ldquo;[\033[40m]&rdquo;       # Black
On_Red=&ldquo;[\033[41m]&rdquo;         # Red
On_Green=&ldquo;[\033[42m]&rdquo;       # Green
On_Yellow=&ldquo;[\033[43m]&rdquo;      # Yellow
On_Blue=&ldquo;[\033[44m]&rdquo;        # Blue
On_Purple=&ldquo;[\033[45m]&rdquo;      # Purple
On_Cyan=&ldquo;[\033[46m]&rdquo;        # Cyan
On_White=&ldquo;[\033[47m]&rdquo;       # White</p>

<h1>High Intensty</h1>

<p>IBlack=&ldquo;[\033[0;90m]&rdquo;       # Black
IRed=&ldquo;[\033[0;91m]&rdquo;         # Red
IGreen=&ldquo;[\033[0;92m]&rdquo;       # Green
IYellow=&ldquo;[\033[0;93m]&rdquo;      # Yellow
IBlue=&ldquo;[\033[0;94m]&rdquo;        # Blue
IPurple=&ldquo;[\033[0;95m]&rdquo;      # Purple
ICyan=&ldquo;[\033[0;96m]&rdquo;        # Cyan
IWhite=&ldquo;[\033[0;97m]&rdquo;       # White</p>

<h1>Bold High Intensty</h1>

<p>BIBlack=&ldquo;[\033[1;90m]&rdquo;      # Black
BIRed=&ldquo;[\033[1;91m]&rdquo;        # Red
BIGreen=&ldquo;[\033[1;92m]&rdquo;      # Green
BIYellow=&ldquo;[\033[1;93m]&rdquo;     # Yellow
BIBlue=&ldquo;[\033[1;94m]&rdquo;       # Blue
BIPurple=&ldquo;[\033[1;95m]&rdquo;     # Purple
BICyan=&ldquo;[\033[1;96m]&rdquo;       # Cyan
BIWhite=&ldquo;[\033[1;97m]&rdquo;      # White</p>

<h1>High Intensty backgrounds</h1>

<p>On_IBlack=&ldquo;[\033[0;100m]&rdquo;   # Black
On_IRed=&ldquo;[\033[0;101m]&rdquo;     # Red
On_IGreen=&ldquo;[\033[0;102m]&rdquo;   # Green
On_IYellow=&ldquo;[\033[0;103m]&rdquo;  # Yellow
On_IBlue=&ldquo;[\033[0;104m]&rdquo;    # Blue
On_IPurple=&ldquo;[\033[10;95m]&rdquo;  # Purple
On_ICyan=&ldquo;[\033[0;106m]&rdquo;    # Cyan
On_IWhite=&ldquo;[\033[0;107m]&rdquo;   # White</p>

<h1>Random PS1 EDIT</h1>

<p>GIT_PS1_SHOWDIRTYSTATE=false</p>

<p>if [[ ${EUID} == 0 ]] ; then
  sq_color=$BRed
else
  sq_color=$BBlue
fi</p>

<p>export PS1=&ldquo;\n$sq_color\342\224\214\342\224\200\$([[ \$? != 0 ]] &amp;&amp; echo \&rdquo;[$BRed\342\234\227$sq_color]\342\224\200\&ldquo;)[$IBlack\t$sq_color]\342\224\200[[\033[01;37m]\u$sq_color]\342\224\200[$BGreen\w$sq_color]\n$sq_color\342\224\224\342\224\200\342\224\200> $BRed\$(&rdquo;&ldquo;) $sq_color\$ $Color_Off&rdquo;</p>

<pre><code>alias ls="ls --color=auto"
alias dir="dir --color=auto"
alias grep="grep --color=auto"
alias dmesg='dmesg --color'
man() {
    env LESS_TERMCAP_mb=$'\E[01;31m' \
    LESS_TERMCAP_md=$'\E[01;38;5;74m' \
    LESS_TERMCAP_me=$'\E[0m' \
    LESS_TERMCAP_se=$'\E[0m' \
    LESS_TERMCAP_so=$'\E[38;5;246m' \
    LESS_TERMCAP_ue=$'\E[0m' \
    LESS_TERMCAP_us=$'\E[04;38;5;146m' \
    man "$@"
}
</code></pre>

<p>else</p>

<pre><code># show root@ when we do not have colors

PS1="\u@\h \w \$([[ \$? != 0 ]] &amp;&amp; echo \":( \")\$ "

# Use this other PS1 string if you want \W for root and \w for all other users:
# PS1="\u@\h $(if [[ ${EUID} == 0 ]]; then echo '\W'; else echo '\w'; fi) \$([[ \$? != 0 ]] &amp;&amp; echo \":( \")\$ "
</code></pre>

<p>fi</p>

<p>PS2=&ldquo;> &rdquo;
PS3=&ldquo;> &rdquo;
PS4=&ldquo;+ &rdquo;</p>

<h1>Try to keep environment pollution down, EPA loves us.</h1>

<p>unset safe_term match_lhs</p>

<h1>Try to enable the auto-completion (type: &ldquo;pacman -S bash-completion&rdquo; to install it).</h1>

<p>[ -r /usr/share/bash-completion/bash_completion ] &amp;&amp; . /usr/share/bash-completion/bash_completion</p>

<h1>Try to enable the &ldquo;Command not found&rdquo; hook (&ldquo;pacman -S pkgfile&rdquo; to install it).</h1>

<h1>See also: <a href="https://wiki.archlinux.org/index.php/Bash#The_.22command_not_found.22_hook">https://wiki.archlinux.org/index.php/Bash#The_.22command_not_found.22_hook</a></h1>

<p>[ -r /usr/share/doc/pkgfile/command-not-found.bash ] &amp;&amp; . /usr/share/doc/pkgfile/command-not-found.bash</p>

<p>archey
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linklog &#038; Yahoo Pipes]]></title>
    <link href="http://ncatarino.github.io/archives/1448"/>
    <updated>2013-09-19T00:00:00+01:00</updated>
    <id>http://ncatarino.github.io/archives/linkblog-yahoo-pipes</id>
    <content type="html"><![CDATA[<p>So I found a way to combine multiple RSS feeds and present them on a single feed. Turns out Yahoo Pipes, a thing that I had never heard of before, is really useful. My mind was somewhat blown by what I can do with them. I think Yahoo needs to advertise their stuff a little better. Either that or I <em>really</em> need to pay more attention to what&#8217;s going on in the intertubes.</p>

<p>In any case, I managed to combine items published through <a href="http://tt-rss.org/redmine/projects/tt-rss/wiki" target="_blank"><span style="text-decoration: underline;">tt-rss</span></a> and another linklog software thingie I use. It&#8217;s <a href="http://pipes.yahoo.com/pipes/pipe.info?_id=168514ce88f11afc75a8bb3eec45ad32" target="_blank"><span style="text-decoration: underline;">right here</span></a>. You can turn the pipe result into RSS or JSON or whatever pleases your heart. Full URL is as follows:</p>

<blockquote><p><a href="http://pipes.yahoo.com/pipes/pipe.info?_id=168514ce88f11afc75a8bb3eec45ad32">http://pipes.yahoo.com/pipes/pipe.info?_id=168514ce88f11afc75a8bb3eec45ad32</a></p></blockquote>

<p>It&#8217;s mostly newspaper articles and tidbits of information I find useful while on the internet. It&#8217;s also available on a widget rss whatchamacallit on this website, one of the right side panels. If you have a link/linklog feed of your own please leave a comment with it, I&#8217;m always looking for decent feeds.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modern Computers]]></title>
    <link href="http://ncatarino.github.io/archives/1328"/>
    <updated>2013-01-01T00:00:00+00:00</updated>
    <id>http://ncatarino.github.io/archives/modern-computers</id>
    <content type="html"><![CDATA[<p>Multiple processors, gigabytes of ram, videocards with 400 times more memory than my first computer ever had and he had no videocard worth mentioning at all..and what do I find myself playing? Also, happy new year :)</p>

<p style="text-align: center">
  <a href="http://ncatarino.net/wp-content/uploads/2013/01/angband.png"><img class="aligncenter  wp-image-1329" alt="angband" src="http://ncatarino.net/wp-content/uploads/2013/01/angband-1024x560.png" width="496" height="271" /></a>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Art of Glitching]]></title>
    <link href="http://ncatarino.github.io/archives/1262"/>
    <updated>2012-05-14T00:00:00+01:00</updated>
    <id>http://ncatarino.github.io/archives/the-art-of-glitching</id>
    <content type="html"><![CDATA[<p style="text-align: left;">
  So, a friend of mine asked me for any piece of mac or windows software that would &#8220;glitch&#8221; images as he needs it for some artsy thing. I didn&#8217;t quite understand what he was after at first, but when the conversation continued and I put my Google Fu to work I realized people were glitching images as an art form. You know when sometimes there&#8217;s data corruption on your hard or usb drive? Images get all twisted and/or with a crapton of artifacts in it. Glitching is the art of doing it on purpose! It&#8217;s also hella fun to look at the result in some cases. Here&#8217;s a &#8216;glitched&#8217; image so you can have a better perception of what I&#8217;m talking about. Non glitched on the left, glitched on the right. Click them to see a bigger picture.
</p>




<p style="text-align: center;">
  <a href="http://ncatarino.net/wp-content/uploads/2012/05/nonwarp.png"><img class="alignnone size-thumbnail wp-image-1263" title="Non Glitched" src="http://ncatarino.net/wp-content/uploads/2012/05/nonwarp-112x150.png" alt="Non Glitched" width="112" height="150" /></a> <a href="http://ncatarino.net/wp-content/uploads/2012/05/warped.jpg"><img class="alignnone size-thumbnail wp-image-1264" title="Glitched" src="http://ncatarino.net/wp-content/uploads/2012/05/warped-112x150.jpg" alt="Glitched" width="112" height="150" /></a>
</p>




<p style="text-align: left;">
  Looks great, doesn&#8217;t it? But how exactly does one do this? Well&#8230;read on, friend.
</p>




<!--more-->




<p style="text-align: left;">
  At first I started looking for a Photoshop plugin because if it exists, there&#8217;s a Photoshop plugin for it. Right? Wrong. The only plugin I found related in any way to this was an After Effects plugin, and that&#8217;s video. Apparently glitching is also used in video, they call it datamoshing. Cool name.
</p>




<p style="text-align: left;">
  Following that and as I entered Zen State in my Google Fu, I discovered enlightenment. You only need Paint and Wordpad to do this. Two common Windows pieces of software no one would ever consider when doing <em>serious business</em> image editing. You open the image in Paint and save it in .bmp (bitmap) format as this format renders the file less &#8216;fragile&#8217; to the procedure that follows. And yes, it&#8217;s important you use Paint for some reason. I tried saving it on Irfanview and it didn&#8217;t work. Next up you open Wordpad and drop the file in it, just click the file and drag it into Wordpad. Press &#8216;Save&#8217; once and that&#8217;s it. Congrats, you glitched an image. For some god knows why reason (ehh, I&#8217;m sure some nerd can explain it) the file generated is a corrupt version of the previous image.
</p>




<p style="text-align: left;">
  So, yeah. I guess the next step is to google for ALL the images (if you know what I mean) and glitch them? Fun, fun, fun!
</p>

]]></content>
  </entry>
  
</feed>
